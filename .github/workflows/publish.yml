name: Changeset Version and Publish

on:
  push:
    branches: [main]
    paths-ignore: ["README.md"]

jobs:
  version:
    runs-on: ubuntu-latest
    # For all pushes to main that do not have a commit message that starts with Version Packages, and thus aren't merging a versioning PR
    # Run the build and tests
    # Run the changesets action, which will either no-op if there are no changesets present,
    # or generate the Version Packages PR containing the updated version and merged release notes if there are changesets present
    if: ${{ !startsWith(github.event.commits[0].message, 'Version Packages') }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: "14.*"

      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.15.2
          run_install: true

      - run: |
          pnpm run build
          pnpm run test

      - uses: changesets/action@master
        with:
          version: pnpm run ci:version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    # For all pushes to main that have a commit message that starts with Version Packages, and therefore are merging a versioning PR
    # Scrape the updated version from packages.json
    # Run the build and pack
    # Upload the built package to build artifacts
    # Tag the repository with the updated version
    # Run the changesets action, which will run the overridden publish command (a hack required for the action to work without publishing to NPM)
    # and generate a GitHub Release with an appropriate version (taken from the publish command override output) and release note scraped from CHANGELOG.md
    if: ${{ startsWith(github.event.commits[0].message, 'Version Packages') }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v2
        with:
          node-version: "14.*"

      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.15.2
          run_install: true

      - id: build
        run: pnpm run build

      - uses: changesets/action@master
        with:
          publish: pnpm run ci:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v2.2.2
        with:
          path: ./dist/*
